Parsing input string: main:
Statement: 'main:'
	Label: 'main'
		Identifier: 'main'
			m: 'm'
			a: 'a'
			i: 'i'
			n: 'n'
	:: ':'

Parsing input string: int x = 4;
Statement: 'int x = 4;'
	Declaration: 'int x = 4'
		Type: 'int'
			i: 'i'
			n: 'n'
			t: 't'
		 : ' '
		Identifier: 'x'
			x: 'x'
		MaybeSpace: ' '
			 : ' '
		=: '='
		MaybeSpace: ' '
			 : ' '
		Expression: '4'
			SimpleExpression: '4'
				Term: '4'
					Factor: '4'
						Literal: '4'
							IntegerLiteral: '4'
								4: '4'
	;: ';'

Parsing input string: int y = 5;
Statement: 'int y = 5;'
	Declaration: 'int y = 5'
		Type: 'int'
			i: 'i'
			n: 'n'
			t: 't'
		 : ' '
		Identifier: 'y'
			y: 'y'
		MaybeSpace: ' '
			 : ' '
		=: '='
		MaybeSpace: ' '
			 : ' '
		Expression: '5'
			SimpleExpression: '5'
				Term: '5'
					Factor: '5'
						Literal: '5'
							IntegerLiteral: '5'
								5: '5'
	;: ';'

Parsing input string: int z = x+y;
Statement: 'int z = x+y;'
	Declaration: 'int z = x+y'
		Type: 'int'
			i: 'i'
			n: 'n'
			t: 't'
		 : ' '
		Identifier: 'z'
			z: 'z'
		MaybeSpace: ' '
			 : ' '
		=: '='
		MaybeSpace: ' '
			 : ' '
		Expression: 'x+y'
			SimpleExpression: 'x+y'
				Term: 'x'
					Factor: 'x'
						Identifier: 'x'
							x: 'x'
				MaybeSpace: ''
					~NULLSYMBOL~: ''
				AddOperator: '+'
					+: '+'
				MaybeSpace: ''
					~NULLSYMBOL~: ''
				SimpleExpression: 'y'
					Term: 'y'
						Factor: 'y'
							Identifier: 'y'
								y: 'y'
	;: ';'

Parsing input string: float a = 3.5;
Statement: 'float a = 3.5;'
	Declaration: 'float a = 3.5'
		Type: 'float'
			f: 'f'
			l: 'l'
			o: 'o'
			a: 'a'
			t: 't'
		 : ' '
		Identifier: 'a'
			a: 'a'
		MaybeSpace: ' '
			 : ' '
		=: '='
		MaybeSpace: ' '
			 : ' '
		Expression: '3.5'
			SimpleExpression: '3.5'
				Term: '3.5'
					Factor: '3.5'
						Literal: '3.5'
							FloatLiteral: '3.5'
								IntegerLiteral: '3'
									3: '3'
								.: '.'
								IntegerLiteral: '5'
									5: '5'
	;: ';'

Parsing input string: char b = 'a';
Statement: "char b = 'a';"
	Declaration: "char b = 'a'"
		Type: 'char'
			c: 'c'
			h: 'h'
			a: 'a'
			r: 'r'
		 : ' '
		Identifier: 'b'
			b: 'b'
		MaybeSpace: ' '
			 : ' '
		=: '='
		MaybeSpace: ' '
			 : ' '
		Expression: "'a'"
			SimpleExpression: "'a'"
				Term: "'a'"
					Factor: "'a'"
						Literal: "'a'"
							CharacterLiteral: "'a'"
								': "'"
								Character: 'a'
									a: 'a'
								': "'"
	;: ';'

Parsing input string: String c = "Hello";
Statement: 'String c = "Hello";'
	Declaration: 'String c = "Hello"'
		Type: 'String'
			S: 'S'
			t: 't'
			r: 'r'
			i: 'i'
			n: 'n'
			g: 'g'
		 : ' '
		Identifier: 'c'
			c: 'c'
		MaybeSpace: ' '
			 : ' '
		=: '='
		MaybeSpace: ' '
			 : ' '
		Expression: '"Hello"'
			SimpleExpression: '"Hello"'
				Term: '"Hello"'
					Factor: '"Hello"'
						Literal: '"Hello"'
							StringLiteral: '"Hello"'
								": '"'
								String: 'Hello'
									H: 'H'
									e: 'e'
									l: 'l'
									l: 'l'
									o: 'o'
								": '"'
	;: ';'

Parsing input string: boolean d = true;
Statement: 'boolean d = true;'
	Declaration: 'boolean d = true'
		Type: 'boolean'
			b: 'b'
			o: 'o'
			o: 'o'
			l: 'l'
			e: 'e'
			a: 'a'
			n: 'n'
		 : ' '
		Identifier: 'd'
			d: 'd'
		MaybeSpace: ' '
			 : ' '
		=: '='
		MaybeSpace: ' '
			 : ' '
		Expression: 'true'
			SimpleExpression: 'true'
				Term: 'true'
					Factor: 'true'
						Literal: 'true'
							BooleanLiteral: 'true'
								t: 't'
								r: 'r'
								u: 'u'
								e: 'e'
	;: ';'

Parsing input string: x = func(y, z);
Statement: 'x = func(y, z);'
	Assignment: 'x = func(y, z)'
		StandardAssignment: 'x = func(y, z)'
			Identifier: 'x'
				x: 'x'
			MaybeSpace: ' '
				 : ' '
			=: '='
			MaybeSpace: ' '
				 : ' '
			Expression: 'func(y, z)'
				SimpleExpression: 'func(y, z)'
					Term: 'func(y, z)'
						Factor: 'func(y, z)'
							FunctionCall: 'func(y, z)'
								Identifier: 'func'
									f: 'f'
									u: 'u'
									n: 'n'
									c: 'c'
								(: '('
								MaybeSpace: ''
									~NULLSYMBOL~: ''
								ArgumentList: 'y, z'
									Expression: 'y'
										SimpleExpression: 'y'
											Term: 'y'
												Factor: 'y'
													Identifier: 'y'
														y: 'y'
									,: ','
									MaybeSpace: ' '
										 : ' '
									ArgumentList: 'z'
										Expression: 'z'
											SimpleExpression: 'z'
												Term: 'z'
													Factor: 'z'
														Identifier: 'z'
															z: 'z'
								MaybeSpace: ''
									~NULLSYMBOL~: ''
								): ')'
	;: ';'

Parsing input string: x-2*(y+z);
Statement: 'x-2*(y+z);'
	Expression: 'x-2*(y+z)'
		SimpleExpression: 'x-2*(y+z)'
			Term: 'x'
				Factor: 'x'
					Identifier: 'x'
						x: 'x'
			MaybeSpace: ''
				~NULLSYMBOL~: ''
			AddOperator: '-'
				-: '-'
			MaybeSpace: ''
				~NULLSYMBOL~: ''
			SimpleExpression: '2*(y+z)'
				Term: '2*(y+z)'
					Factor: '2'
						Literal: '2'
							IntegerLiteral: '2'
								2: '2'
					MaybeSpace: ''
						~NULLSYMBOL~: ''
					MultiplyOperator: '*'
						*: '*'
					MaybeSpace: ''
						~NULLSYMBOL~: ''
					Term: '(y+z)'
						Factor: '(y+z)'
							(: '('
							MaybeSpace: ''
								~NULLSYMBOL~: ''
							Expression: 'y+z'
								SimpleExpression: 'y+z'
									Term: 'y'
										Factor: 'y'
											Identifier: 'y'
												y: 'y'
									MaybeSpace: ''
										~NULLSYMBOL~: ''
									AddOperator: '+'
										+: '+'
									MaybeSpace: ''
										~NULLSYMBOL~: ''
									SimpleExpression: 'z'
										Term: 'z'
											Factor: 'z'
												Identifier: 'z'
													z: 'z'
							MaybeSpace: ''
								~NULLSYMBOL~: ''
							): ')'
	;: ';'

Parsing input string: int q = array(6);
Statement: 'int q = array(6);'
	Declaration: 'int q = array(6)'
		Type: 'int'
			i: 'i'
			n: 'n'
			t: 't'
		 : ' '
		Identifier: 'q'
			q: 'q'
		MaybeSpace: ' '
			 : ' '
		=: '='
		MaybeSpace: ' '
			 : ' '
		Expression: 'array(6)'
			SimpleExpression: 'array(6)'
				Term: 'array(6)'
					Factor: 'array(6)'
						FunctionCall: 'array(6)'
							Identifier: 'array'
								a: 'a'
								r: 'r'
								r: 'r'
								a: 'a'
								y: 'y'
							(: '('
							MaybeSpace: ''
								~NULLSYMBOL~: ''
							ArgumentList: '6'
								Expression: '6'
									SimpleExpression: '6'
										Term: '6'
											Factor: '6'
												Literal: '6'
													IntegerLiteral: '6'
														6: '6'
							MaybeSpace: ''
								~NULLSYMBOL~: ''
							): ')'
	;: ';'

Parsing input string: q[0] = 1;
Statement: 'q[0] = 1;'
	Assignment: 'q[0] = 1'
		ArrayAssignment: 'q[0] = 1'
			ArrayAccess: 'q[0]'
				Identifier: 'q'
					q: 'q'
				[: '['
				MaybeSpace: ''
					~NULLSYMBOL~: ''
				Expression: '0'
					SimpleExpression: '0'
						Term: '0'
							Factor: '0'
								Literal: '0'
									IntegerLiteral: '0'
										0: '0'
				MaybeSpace: ''
					~NULLSYMBOL~: ''
				]: ']'
			MaybeSpace: ' '
				 : ' '
			=: '='
			MaybeSpace: ' '
				 : ' '
			Expression: '1'
				SimpleExpression: '1'
					Term: '1'
						Factor: '1'
							Literal: '1'
								IntegerLiteral: '1'
									1: '1'
	;: ';'

